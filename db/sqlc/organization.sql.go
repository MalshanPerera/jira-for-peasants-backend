// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: organization.sql

package db

import (
	"context"
)

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO organization (
  user_id, name, slug
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, name, slug, created_at, updated_at
`

type CreateOrganizationParams struct {
	UserID string
	Name   string
	Slug   string
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, createOrganization, arg.UserID, arg.Name, arg.Slug)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrganization = `-- name: DeleteOrganization :exec
DELETE FROM organization
WHERE user_id = $1
`

func (q *Queries) DeleteOrganization(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, deleteOrganization, userID)
	return err
}

const getOrganization = `-- name: GetOrganization :one
SELECT id, user_id, name, slug, created_at, updated_at FROM organization
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetOrganization(ctx context.Context, userID string) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrganization, userID)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOrganization = `-- name: UpdateOrganization :one
UPDATE organization
SET name = $2, slug = $3
WHERE user_id = $1

RETURNING id, user_id, name, slug, created_at, updated_at
`

type UpdateOrganizationParams struct {
	UserID string
	Name   string
	Slug   string
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, updateOrganization, arg.UserID, arg.Name, arg.Slug)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOrganizationOwner = `-- name: UpdateOrganizationOwner :one
UPDATE organization
SET user_id = $2
WHERE user_id = $1

RETURNING id, user_id, name, slug, created_at, updated_at
`

type UpdateOrganizationOwnerParams struct {
	UserID   string
	UserID_2 string
}

func (q *Queries) UpdateOrganizationOwner(ctx context.Context, arg UpdateOrganizationOwnerParams) (Organization, error) {
	row := q.db.QueryRow(ctx, updateOrganizationOwner, arg.UserID, arg.UserID_2)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
